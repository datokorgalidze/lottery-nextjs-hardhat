{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Lottery__RaffleNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__SendMoreToEnterLottery",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__TransferFaild",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Lottery__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequsedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Lottery.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getsRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x050a1ce5468c95bb51f09663648c880d0fca22aeece47499afdf84fe09abafa3",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1216175",
    "logsBloom": "0x
    "blockHash": "0x286fbc7dde3cdc1047b48cc39cbd8395f91397e5b431e24e0c246debf7238fe7",
    "transactionHash": "0x050a1ce5468c95bb51f09663648c880d0fca22aeece47499afdf84fe09abafa3",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1216175",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "10000000000000000",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "1",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "a350561576e19979e36a892ae5203725",
  "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Lottery__RaffleNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__SendMoreToEnterLottery\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__TransferFaild\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Lottery__UpkeepNotNeeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequsedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Lottery.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getsRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"David Korgalidze\",\"details\":\"This implements the Chainlink VRF Version 2\",\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"This is the function that the Chainlink Keeper nodes call they look for `upkeepNeeded` to return True. the following should be true for this to return true: 1. The time interval has passed between raffle runs. 2. The lottery is open. 3. The contract has ETH. 4. Implicity, your subscription is funded with LINK.\"}},\"title\":\"A sample Raffle Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is for creating a sample raffle contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xf504b227c442cd4ed31b336b7bd15cfcb23220c84c26e750975c7e7d959125aa\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  // solhint-disable-next-line chainlink-solidity/prefix-immutable-variables-with-i\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x5a502a5ce16796565815b295bb2d18a0d26d6f23621f733918c971047c6091d7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x619d9d975540d65ef8d6332a67cbd0dda5b0f95b120b8da56695ed50c2f9fc30\",\"license\":\"MIT\"},\"contracts/Lottery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.27;\\n\\nimport {VRFCoordinatorV2Interface} from \\\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport {VRFConsumerBaseV2} from \\\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\\";\\nimport {AutomationCompatibleInterface} from \\\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\\\";\\n\\n/**\\n * @title A sample Raffle Contract\\n * @author David Korgalidze\\n * @notice This contract is for creating a sample raffle contract\\n * @dev This implements the Chainlink VRF Version 2\\n */\\n\\ncontract Lottery is VRFConsumerBaseV2, AutomationCompatibleInterface {\\n    enum RaffleState {\\n        OPEN,\\n        CALCULATING\\n    }\\n\\n    error Lottery__SendMoreToEnterLottery();\\n    error Lottery__TransferFaild();\\n    error Lottery__RaffleNotOpen();\\n    error Lottery__UpkeepNotNeeded(\\n        uint256 currentBalance,\\n        uint256 numPlayers,\\n        uint256 raffleState\\n    );\\n\\n    /* state variables */\\n\\n    uint256 private immutable i_entranceFee;\\n    address payable[] private s_players;\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_gasLane;\\n    uint64 private immutable i_subscriptionId;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private constant NUM_WORDS = 1;\\n\\n    address private s_recentWinner;\\n    uint256 private s_lastTimestamp;\\n    uint256 private immutable i_interval;\\n    RaffleState private s_raffleState;\\n\\n    event RaffleEnter(address indexed player);\\n    event RequsedRaffleWinner(uint256 indexed requestId);\\n    event WinnerPicked(address indexed winner);\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint256 entranceFee,\\n        bytes32 gasLane,\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit,\\n        uint256 interval\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_entranceFee = entranceFee;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        s_raffleState = RaffleState.OPEN;\\n        s_lastTimestamp = block.timestamp;\\n        i_interval = interval;\\n    }\\n\\n    function enterRaffle() public payable {\\n        if (msg.value < i_entranceFee) {\\n            revert Lottery__SendMoreToEnterLottery();\\n        }\\n        if (s_raffleState != RaffleState.OPEN) {\\n            revert Lottery__RaffleNotOpen();\\n        }\\n        s_players.push(payable(msg.sender));\\n        emit RaffleEnter(msg.sender);\\n    }\\n\\n    /**\\n     * @dev This is the function that the Chainlink Keeper nodes call\\n     * they look for `upkeepNeeded` to return True.\\n     * the following should be true for this to return true:\\n     * 1. The time interval has passed between raffle runs.\\n     * 2. The lottery is open.\\n     * 3. The contract has ETH.\\n     * 4. Implicity, your subscription is funded with LINK.\\n     */\\n\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    )\\n        public\\n        view\\n        override\\n        returns (bool upkeepNeeded, bytes memory /* performData */)\\n    {\\n        bool isOpen = (RaffleState.OPEN == s_raffleState);\\n        bool timePassed = (block.timestamp - s_lastTimestamp) > i_interval;\\n        bool hasPlayers = s_players.length > 0;\\n        bool hasBalance = address(this).balance > 0;\\n        upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\\n        return (upkeepNeeded, \\\"0x0\\\");\\n    }\\n\\n    function performUpkeep(bytes calldata /* performData */) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n\\n        if (!upkeepNeeded) {\\n            revert Lottery__UpkeepNotNeeded(\\n                address(this).balance,\\n                s_players.length,\\n                uint256(s_raffleState)\\n            );\\n        }\\n\\n        s_raffleState = RaffleState.CALCULATING;\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        emit RequsedRaffleWinner(requestId);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 /*requestId*/,\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\n        address payable recentWinner = s_players[indexOfWinner];\\n        s_recentWinner = recentWinner;\\n        s_raffleState = RaffleState.OPEN;\\n        s_players = new address payable[](0);\\n        s_lastTimestamp = block.timestamp;\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) {\\n            revert Lottery__TransferFaild();\\n        }\\n        emit WinnerPicked(recentWinner);\\n    }\\n\\n    /* view / pure getter functions */\\n\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getPlayer(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getsRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getRaffleState() public view returns (RaffleState) {\\n        return s_raffleState;\\n    }\\n\\n    function getLastTimestamp() public view returns (uint256) {\\n        return s_lastTimestamp;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n\\n    function getNumWords() public pure returns (uint256) {\\n        return NUM_WORDS;\\n    }\\n\\n    function getRequestConfirmations() public pure returns (uint256) {\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n}\\n\",\"keccak256\":\"0x2112b58f098fdefae325ebd7da1ce0e3cb8ef4082261c5be31d2cf58bd3ae47a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61016060405234801561001157600080fd5b5060405161180a38038061180a83398181016040528101906100339190610270565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff16815250508163ffffffff166101208163ffffffff16815250506000600360006101000a81548160ff02191690836001811115610105576101046102fd565b5b02179055504260028190555080610140818152505050505050505061032c565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101558261012a565b9050919050565b6101658161014a565b811461017057600080fd5b50565b6000815190506101828161015c565b92915050565b6000819050919050565b61019b81610188565b81146101a657600080fd5b50565b6000815190506101b881610192565b92915050565b6000819050919050565b6101d1816101be565b81146101dc57600080fd5b50565b6000815190506101ee816101c8565b92915050565b600067ffffffffffffffff82169050919050565b610211816101f4565b811461021c57600080fd5b50565b60008151905061022e81610208565b92915050565b600063ffffffff82169050919050565b61024d81610234565b811461025857600080fd5b50565b60008151905061026a81610244565b92915050565b60008060008060008060c0878903121561028d5761028c610125565b5b600061029b89828a01610173565b96505060206102ac89828a016101a9565b95505060406102bd89828a016101df565b94505060606102ce89828a0161021f565b93505060806102df89828a0161025b565b92505060a06102f089828a016101a9565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e05161010051610120516101405161146f61039b600039600081816107e80152610891015260006106d0015260006106ad0152600061068c015260006106500152600081816102fa015261042101526000818161036101526103b5015261146f6000f3fe6080604052600436106100c25760003560e01c80634585e33b1161007f5780636e04ff0d116100595780636e04ff0d1461022557806391ad27b414610263578063e55ae4e81461028e578063fd6673f5146102cb576100c2565b80634585e33b146101a657806353a2c19a146101cf5780635f1b0fd8146101fa576100c2565b806309bc33a7146100c7578063115cbaf5146100f25780631d5ab6ab1461011d5780631fe543e3146101485780632cfcc53914610171578063378997701461017b575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610bf9565b60405180910390f35b3480156100fe57600080fd5b5061010761031e565b6040516101149190610c8b565b60405180910390f35b34801561012957600080fd5b50610132610335565b60405161013f9190610ce7565b60405180910390f35b34801561015457600080fd5b5061016f600480360381019061016a9190610e9b565b61035f565b005b61017961041f565b005b34801561018757600080fd5b5061019061058e565b60405161019d9190610bf9565b60405180910390f35b3480156101b257600080fd5b506101cd60048036038101906101c89190610f52565b610598565b005b3480156101db57600080fd5b506101e4610789565b6040516101f19190610bf9565b60405180910390f35b34801561020657600080fd5b5061020f610798565b60405161021c9190610bf9565b60405180910390f35b34801561023157600080fd5b5061024c60048036038101906102479190611054565b6107a5565b60405161025a929190611137565b60405180910390f35b34801561026f57600080fd5b5061027861088d565b6040516102859190610bf9565b60405180910390f35b34801561029a57600080fd5b506102b560048036038101906102b09190611167565b6108b5565b6040516102c29190610ce7565b60405180910390f35b3480156102d757600080fd5b506102e06108fc565b6040516102ed9190610bf9565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600360009054906101000a900460ff16905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461041157337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610408929190611194565b60405180910390fd5b61041b8282610908565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610479576040517fa4078c2400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561048d5761048c610c14565b5b600360009054906101000a900460ff1660018111156104af576104ae610c14565b5b146104e6576040517f9e0db89400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600254905090565b60006105b2604051806020016040528060008152506107a5565b509050806106215747600080549050600360009054906101000a900460ff1660018111156105e3576105e2610c14565b5b6040517f6e195f25000000000000000000000000000000000000000000000000000000008152600401610618939291906111bd565b60405180910390fd5b6001600360006101000a81548160ff0219169083600181111561064757610646610c14565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161071195949392919061126c565b6020604051808303816000875af1158015610730573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075491906112d4565b9050807fd82e93cd0a2db0f267dd25fcf792b8f57a49713aa58bb5ae21a9a71190e514c460405160405180910390a250505050565b6000600163ffffffff16905090565b6000600361ffff16905090565b600060606000600360009054906101000a900460ff1660018111156107cd576107cc610c14565b5b600060018111156107e1576107e0610c14565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426108159190611330565b119050600080600080549050119050600080471190508380156108355750825b801561083e5750815b80156108475750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008082815481106108ca576108c9611364565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b600080805490508260008151811061092357610922611364565b5b602002602001015161093591906113c2565b9050600080828154811061094c5761094b611364565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600360006101000a81548160ff021916908360018111156109e0576109df610c14565b5b0217905550600067ffffffffffffffff811115610a00576109ff610d58565b5b604051908082528060200260200182016040528015610a2e5781602001602082028036833780820191505090505b5060009080519060200190610a44929190610b39565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a7290611424565b60006040518083038185875af1925050503d8060008114610aaf576040519150601f19603f3d011682016040523d82523d6000602084013e610ab4565b606091505b5050905080610aef576040517f02ec7f2200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610bb2579160200282015b82811115610bb15782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b59565b5b509050610bbf9190610bc3565b5090565b5b80821115610bdc576000816000905550600101610bc4565b5090565b6000819050919050565b610bf381610be0565b82525050565b6000602082019050610c0e6000830184610bea565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610c5457610c53610c14565b5b50565b6000819050610c6582610c43565b919050565b6000610c7582610c57565b9050919050565b610c8581610c6a565b82525050565b6000602082019050610ca06000830184610c7c565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610cd182610ca6565b9050919050565b610ce181610cc6565b82525050565b6000602082019050610cfc6000830184610cd8565b92915050565b6000604051905090565b600080fd5b600080fd5b610d1f81610be0565b8114610d2a57600080fd5b50565b600081359050610d3c81610d16565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d9082610d47565b810181811067ffffffffffffffff82111715610daf57610dae610d58565b5b80604052505050565b6000610dc2610d02565b9050610dce8282610d87565b919050565b600067ffffffffffffffff821115610dee57610ded610d58565b5b602082029050602081019050919050565b600080fd5b6000610e17610e1284610dd3565b610db8565b90508083825260208201905060208402830185811115610e3a57610e39610dff565b5b835b81811015610e635780610e4f8882610d2d565b845260208401935050602081019050610e3c565b5050509392505050565b600082601f830112610e8257610e81610d42565b5b8135610e92848260208601610e04565b91505092915050565b60008060408385031215610eb257610eb1610d0c565b5b6000610ec085828601610d2d565b925050602083013567ffffffffffffffff811115610ee157610ee0610d11565b5b610eed85828601610e6d565b9150509250929050565b600080fd5b60008083601f840112610f1257610f11610d42565b5b8235905067ffffffffffffffff811115610f2f57610f2e610ef7565b5b602083019150836001820283011115610f4b57610f4a610dff565b5b9250929050565b60008060208385031215610f6957610f68610d0c565b5b600083013567ffffffffffffffff811115610f8757610f86610d11565b5b610f9385828601610efc565b92509250509250929050565b600080fd5b600067ffffffffffffffff821115610fbf57610fbe610d58565b5b610fc882610d47565b9050602081019050919050565b82818337600083830152505050565b6000610ff7610ff284610fa4565b610db8565b90508281526020810184848401111561101357611012610f9f565b5b61101e848285610fd5565b509392505050565b600082601f83011261103b5761103a610d42565b5b813561104b848260208601610fe4565b91505092915050565b60006020828403121561106a57611069610d0c565b5b600082013567ffffffffffffffff81111561108857611087610d11565b5b61109484828501611026565b91505092915050565b60008115159050919050565b6110b28161109d565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110f25780820151818401526020810190506110d7565b60008484015250505050565b6000611109826110b8565b61111381856110c3565b93506111238185602086016110d4565b61112c81610d47565b840191505092915050565b600060408201905061114c60008301856110a9565b818103602083015261115e81846110fe565b90509392505050565b60006020828403121561117d5761117c610d0c565b5b600061118b84828501610d2d565b91505092915050565b60006040820190506111a96000830185610cd8565b6111b66020830184610cd8565b9392505050565b60006060820190506111d26000830186610bea565b6111df6020830185610bea565b6111ec6040830184610bea565b949350505050565b6000819050919050565b611207816111f4565b82525050565b600067ffffffffffffffff82169050919050565b61122a8161120d565b82525050565b600061ffff82169050919050565b61124781611230565b82525050565b600063ffffffff82169050919050565b6112668161124d565b82525050565b600060a08201905061128160008301886111fe565b61128e6020830187611221565b61129b604083018661123e565b6112a8606083018561125d565b6112b5608083018461125d565b9695505050505050565b6000815190506112ce81610d16565b92915050565b6000602082840312156112ea576112e9610d0c565b5b60006112f8848285016112bf565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061133b82610be0565b915061134683610be0565b925082820390508181111561135e5761135d611301565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113cd82610be0565b91506113d883610be0565b9250826113e8576113e7611393565b5b828206905092915050565b600081905092915050565b50565b600061140e6000836113f3565b9150611419826113fe565b600082019050919050565b600061142f82611401565b915081905091905056fea26469706673582212204b89b62ce2ff75018a8003f079ce0ded507bbc5d311b6bf1ceef036a937d15d664736f6c634300081b0033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c80634585e33b1161007f5780636e04ff0d116100595780636e04ff0d1461022557806391ad27b414610263578063e55ae4e81461028e578063fd6673f5146102cb576100c2565b80634585e33b146101a657806353a2c19a146101cf5780635f1b0fd8146101fa576100c2565b806309bc33a7146100c7578063115cbaf5146100f25780631d5ab6ab1461011d5780631fe543e3146101485780632cfcc53914610171578063378997701461017b575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610bf9565b60405180910390f35b3480156100fe57600080fd5b5061010761031e565b6040516101149190610c8b565b60405180910390f35b34801561012957600080fd5b50610132610335565b60405161013f9190610ce7565b60405180910390f35b34801561015457600080fd5b5061016f600480360381019061016a9190610e9b565b61035f565b005b61017961041f565b005b34801561018757600080fd5b5061019061058e565b60405161019d9190610bf9565b60405180910390f35b3480156101b257600080fd5b506101cd60048036038101906101c89190610f52565b610598565b005b3480156101db57600080fd5b506101e4610789565b6040516101f19190610bf9565b60405180910390f35b34801561020657600080fd5b5061020f610798565b60405161021c9190610bf9565b60405180910390f35b34801561023157600080fd5b5061024c60048036038101906102479190611054565b6107a5565b60405161025a929190611137565b60405180910390f35b34801561026f57600080fd5b5061027861088d565b6040516102859190610bf9565b60405180910390f35b34801561029a57600080fd5b506102b560048036038101906102b09190611167565b6108b5565b6040516102c29190610ce7565b60405180910390f35b3480156102d757600080fd5b506102e06108fc565b6040516102ed9190610bf9565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600360009054906101000a900460ff16905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461041157337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610408929190611194565b60405180910390fd5b61041b8282610908565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610479576040517fa4078c2400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561048d5761048c610c14565b5b600360009054906101000a900460ff1660018111156104af576104ae610c14565b5b146104e6576040517f9e0db89400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600254905090565b60006105b2604051806020016040528060008152506107a5565b509050806106215747600080549050600360009054906101000a900460ff1660018111156105e3576105e2610c14565b5b6040517f6e195f25000000000000000000000000000000000000000000000000000000008152600401610618939291906111bd565b60405180910390fd5b6001600360006101000a81548160ff0219169083600181111561064757610646610c14565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161071195949392919061126c565b6020604051808303816000875af1158015610730573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075491906112d4565b9050807fd82e93cd0a2db0f267dd25fcf792b8f57a49713aa58bb5ae21a9a71190e514c460405160405180910390a250505050565b6000600163ffffffff16905090565b6000600361ffff16905090565b600060606000600360009054906101000a900460ff1660018111156107cd576107cc610c14565b5b600060018111156107e1576107e0610c14565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426108159190611330565b119050600080600080549050119050600080471190508380156108355750825b801561083e5750815b80156108475750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008082815481106108ca576108c9611364565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b600080805490508260008151811061092357610922611364565b5b602002602001015161093591906113c2565b9050600080828154811061094c5761094b611364565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600360006101000a81548160ff021916908360018111156109e0576109df610c14565b5b0217905550600067ffffffffffffffff811115610a00576109ff610d58565b5b604051908082528060200260200182016040528015610a2e5781602001602082028036833780820191505090505b5060009080519060200190610a44929190610b39565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a7290611424565b60006040518083038185875af1925050503d8060008114610aaf576040519150601f19603f3d011682016040523d82523d6000602084013e610ab4565b606091505b5050905080610aef576040517f02ec7f2200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610bb2579160200282015b82811115610bb15782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b59565b5b509050610bbf9190610bc3565b5090565b5b80821115610bdc576000816000905550600101610bc4565b5090565b6000819050919050565b610bf381610be0565b82525050565b6000602082019050610c0e6000830184610bea565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610c5457610c53610c14565b5b50565b6000819050610c6582610c43565b919050565b6000610c7582610c57565b9050919050565b610c8581610c6a565b82525050565b6000602082019050610ca06000830184610c7c565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610cd182610ca6565b9050919050565b610ce181610cc6565b82525050565b6000602082019050610cfc6000830184610cd8565b92915050565b6000604051905090565b600080fd5b600080fd5b610d1f81610be0565b8114610d2a57600080fd5b50565b600081359050610d3c81610d16565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d9082610d47565b810181811067ffffffffffffffff82111715610daf57610dae610d58565b5b80604052505050565b6000610dc2610d02565b9050610dce8282610d87565b919050565b600067ffffffffffffffff821115610dee57610ded610d58565b5b602082029050602081019050919050565b600080fd5b6000610e17610e1284610dd3565b610db8565b90508083825260208201905060208402830185811115610e3a57610e39610dff565b5b835b81811015610e635780610e4f8882610d2d565b845260208401935050602081019050610e3c565b5050509392505050565b600082601f830112610e8257610e81610d42565b5b8135610e92848260208601610e04565b91505092915050565b60008060408385031215610eb257610eb1610d0c565b5b6000610ec085828601610d2d565b925050602083013567ffffffffffffffff811115610ee157610ee0610d11565b5b610eed85828601610e6d565b9150509250929050565b600080fd5b60008083601f840112610f1257610f11610d42565b5b8235905067ffffffffffffffff811115610f2f57610f2e610ef7565b5b602083019150836001820283011115610f4b57610f4a610dff565b5b9250929050565b60008060208385031215610f6957610f68610d0c565b5b600083013567ffffffffffffffff811115610f8757610f86610d11565b5b610f9385828601610efc565b92509250509250929050565b600080fd5b600067ffffffffffffffff821115610fbf57610fbe610d58565b5b610fc882610d47565b9050602081019050919050565b82818337600083830152505050565b6000610ff7610ff284610fa4565b610db8565b90508281526020810184848401111561101357611012610f9f565b5b61101e848285610fd5565b509392505050565b600082601f83011261103b5761103a610d42565b5b813561104b848260208601610fe4565b91505092915050565b60006020828403121561106a57611069610d0c565b5b600082013567ffffffffffffffff81111561108857611087610d11565b5b61109484828501611026565b91505092915050565b60008115159050919050565b6110b28161109d565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110f25780820151818401526020810190506110d7565b60008484015250505050565b6000611109826110b8565b61111381856110c3565b93506111238185602086016110d4565b61112c81610d47565b840191505092915050565b600060408201905061114c60008301856110a9565b818103602083015261115e81846110fe565b90509392505050565b60006020828403121561117d5761117c610d0c565b5b600061118b84828501610d2d565b91505092915050565b60006040820190506111a96000830185610cd8565b6111b66020830184610cd8565b9392505050565b60006060820190506111d26000830186610bea565b6111df6020830185610bea565b6111ec6040830184610bea565b949350505050565b6000819050919050565b611207816111f4565b82525050565b600067ffffffffffffffff82169050919050565b61122a8161120d565b82525050565b600061ffff82169050919050565b61124781611230565b82525050565b600063ffffffff82169050919050565b6112668161124d565b82525050565b600060a08201905061128160008301886111fe565b61128e6020830187611221565b61129b604083018661123e565b6112a8606083018561125d565b6112b5608083018461125d565b9695505050505050565b6000815190506112ce81610d16565b92915050565b6000602082840312156112ea576112e9610d0c565b5b60006112f8848285016112bf565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061133b82610be0565b915061134683610be0565b925082820390508181111561135e5761135d611301565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113cd82610be0565b91506113d883610be0565b9250826113e8576113e7611393565b5b828206905092915050565b600081905092915050565b50565b600061140e6000836113f3565b9150611419826113fe565b600082019050919050565b600061142f82611401565b915081905091905056fea26469706673582212204b89b62ce2ff75018a8003f079ce0ded507bbc5d311b6bf1ceef036a937d15d664736f6c634300081b0033",
  "devdoc": {
    "author": "David Korgalidze",
    "details": "This implements the Chainlink VRF Version 2",
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "This is the function that the Chainlink Keeper nodes call they look for `upkeepNeeded` to return True. the following should be true for this to return true: 1. The time interval has passed between raffle runs. 2. The lottery is open. 3. The contract has ETH. 4. Implicity, your subscription is funded with LINK."
      }
    },
    "title": "A sample Raffle Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is for creating a sample raffle contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1339,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 1356,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1358,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lastTimestamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1363,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_raffleState",
        "offset": 0,
        "slot": "3",
        "type": "t_enum(RaffleState)1320"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)1320": {
        "encoding": "inplace",
        "label": "enum Lottery.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}